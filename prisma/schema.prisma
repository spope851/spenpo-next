// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("wp_nextauth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wp_nextauth_sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  @@map("wp_nextauth_users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("wp_nextauth_verification_tokens")
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Float
  orders        Order[]
  hide          Boolean   @default(false)
  learnMore     String?
  buyNow        String?

  @@map("wp_spenpo_products")
}

model Order {
  id            String    @id @default(cuid())
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  metadata      Json?
  complete      Boolean   @default(false)
  error         Json?
  environment   String

  @@map("wp_spenpo_orders")
}

model Mandarin {
  id            Int    @id @default(autoincrement())
  traditional   String
  simplified    String
  pinyin        String
  meaning       String

  @@map("wp_spenpo_mandarin")
}

model Truth {
  id            Int    @id @default(autoincrement())
  sentence      String
  is_true       Boolean

  @@map("wp_spenpo_truth")
}
